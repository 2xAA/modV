webpackJsonp([31],{840:function(n,t){n.exports='// SaturdayShader Week 29 : Wave Lines\n// by Joseph Fiola (http://www.joefiola.com)\n// 2016-03-05\n//Remix by SilviaFabiani\n// Based on "WAVES" Shadertoy by bonniem\n// https://www.shadertoy.com/view/4dsGzH\n\n/*{\n  "CREDIT": "Joseph Fiola",\n  "DESCRIPTION": "",\n  "CATEGORIES": [\n    "Generator"\n  ],\n  "INPUTS": [\n    {\n      "NAME": "amp",\n      "TYPE": "float",\n      "DEFAULT": 0.0,\n      "MIN": -1.3,\n      "MAX": 2.3\n    },\n    {\n      "NAME": "glow",\n      "TYPE": "float",\n      "DEFAULT": 0.5,\n      "MIN": -10,\n      "MAX": 0.6\n    },\n    {\n      "NAME": "mod2",\n      "TYPE": "float",\n      "DEFAULT": 0,\n      "MIN": -1,\n      "MAX": 1\n    },\n    {\n      "NAME": "zoom",\n      "TYPE": "float",\n      "DEFAULT": 10,\n      "MIN": 0,\n      "MAX": 100\n    },\n    {\n      "NAME": "rotateCanvas",\n      "TYPE": "float",\n      "DEFAULT": 0,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "scroll",\n      "TYPE": "float",\n      "DEFAULT": 0,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "pos",\n      "TYPE": "point2D",\n      "DEFAULT": [\n        0.5,\n        0.5\n      ],\n      "MIN": [\n        0,\n        0\n      ],\n      "MAX": [\n        1,\n        1\n      ]\n    },\n    {\n      "NAME": "twisted",\n      "TYPE": "float",\n      "DEFAULT": -0.050,\n      "MIN": -0.3,\n      "MAX": 0.3\n    }\n  ]\n}*/\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n\tuv -= vec2(pos);\n\tuv.x *= RENDERSIZE.x/RENDERSIZE.y;\n\tuv *= zoom; // Scale the coordinate system\n\tuv = rotate2d(rotateCanvas*-TWO_PI) * uv; \n\t\n\t\n\t// waves\n\tvec3 wave_color = vec3(0.2, 0.1, 0.0);\n\t\n\tfloat wave_width = 0.01;\n\tfor(int i = 0; i < 10; ++i) {\n\t\t\n\t\tuv = rotate2d(twisted*-TWO_PI) * uv; \n\n\t\tuv.y +=  (sin(sin(uv.x + float(i)*1.0 + (scroll * TWO_PI) )/3.) * amp + (mod2 * PI));\n\t\twave_width = abs(1.0 / (50.0 * uv.y * glow));\n\t\twave_color += vec3(wave_width, wave_width, wave_width);\n\t}\n\t\n\tgl_FragColor = vec4(wave_color, 1.0);\n}'}});