webpackJsonp([11],{841:function(r,n){r.exports='/*\r\n{\r\n  "CATEGORIES": [\r\n    "Automatically Converted"\r\n  ],\r\n  "DESCRIPTION": "Automatically converted from https://www.shadertoy.com/view/Ms2SD1",\r\n  "IMPORTED": [\r\n    \r\n  ],\r\n  "INPUTS": [\r\n    {\r\n      "NAME": "iMouse",\r\n      "TYPE": "point2D"\r\n    },\r\n    {\r\n      "NAME": "SEA_FREQ",\r\n      "MIN": 0.0,\r\n      "MAX": 1.0,\r\n      "TYPE": "float",\r\n      "DEFAULT": 0.16\r\n    },\r\n    {\r\n      "NAME": "SEA_CHOPPY",\r\n      "MIN": 0.0,\r\n      "MAX": 8.0,\r\n      "TYPE": "float",\r\n      "DEFAULT": 4.0\r\n    },\r\n    {\r\n      "NAME": "SEA_HEIGHT",\r\n      "MIN": 0.0,\r\n      "MAX": 3.0,\r\n      "TYPE": "float",\r\n      "DEFAULT": 0.6\r\n    },\r\n    {\r\n      "NAME": "SEA_SPEED",\r\n      "MIN": 0.0,\r\n      "MAX": 2.0,\r\n      "TYPE": "float",\r\n      "DEFAULT": 0.8\r\n    },\r\n\t{\r\n\t\t"NAME": "SEA_BASE",\r\n\t\t"TYPE": "color",\r\n\t\t"DEFAULT": [\r\n\t\t\t0.1,\r\n\t\t\t0.19,\r\n\t\t\t0.22,\r\n\t\t\t1.0\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t"NAME": "SEA_WATER_COLOR",\r\n\t\t"TYPE": "color",\r\n\t\t"DEFAULT": [\r\n\t\t\t0.8,\r\n\t\t\t0.9,\r\n\t\t\t0.6,\r\n\t\t\t1.0\r\n\t\t]\r\n\t}\t\r\n  ]\r\n}\r\n*/\r\n\r\n\r\n// "Seascape" by Alexander Alekseev aka TDM - 2014\r\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n\r\nconst int NUM_STEPS = 8;\r\nconst float PI\t \t= 3.1415;\r\nconst float EPSILON\t= 1e-3;\r\nfloat EPSILON_NRM\t= 0.1 / RENDERSIZE.x;\r\n\r\n// sea\r\nconst int ITER_GEOMETRY = 3;\r\nconst int ITER_FRAGMENT = 5;\r\n//const float SEA_HEIGHT = 0.6;\r\n//const float SEA_CHOPPY = 4.0;\r\n//const float SEA_SPEED = 0.8;\r\n//const float SEA_FREQ = 0.16;\r\n//const vec3 SEA_BASE = vec3(0.1,0.19,0.22);\r\n//const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);\r\nfloat SEA_TIME = TIME * SEA_SPEED;\r\nmat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\r\n\r\n// math\r\nmat3 fromEuler(vec3 ang) {\r\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\r\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\r\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\r\n    mat3 m;\r\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\r\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\r\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\r\n\treturn m;\r\n}\r\nfloat hash( vec2 p ) {\r\n\tfloat h = dot(p,vec2(127.1,311.7));\t\r\n    return fract(sin(h)*43758.5453123);\r\n}\r\nfloat noise( in vec2 p ) {\r\n    vec2 i = floor( p );\r\n    vec2 f = fract( p );\t\r\n\tvec2 u = f*f*(3.0-2.0*f);\r\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), \r\n                     hash( i + vec2(1.0,0.0) ), u.x),\r\n                mix( hash( i + vec2(0.0,1.0) ), \r\n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\r\n}\r\n\r\n// lighting\r\nfloat diffuse(vec3 n,vec3 l,float p) {\r\n    return pow(dot(n,l) * 0.4 + 0.6,p);\r\n}\r\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \r\n    float nrm = (s + 8.0) / (3.1415 * 8.0);\r\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\r\n}\r\n\r\n// sky\r\nvec3 getSkyColor(vec3 e) {\r\n    e.y = max(e.y,0.0);\r\n    vec3 ret;\r\n    ret.x = pow(1.0-e.y,2.0);\r\n    ret.y = 1.0-e.y;\r\n    ret.z = 0.6+(1.0-e.y)*0.4;\r\n    return ret;\r\n}\r\n\r\n// sea\r\nfloat sea_octave(vec2 uv, float choppy) {\r\n    uv += noise(uv);        \r\n    vec2 wv = 1.0-abs(sin(uv));\r\n    vec2 swv = abs(cos(uv));    \r\n    wv = mix(wv,swv,wv);\r\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\r\n}\r\n\r\nfloat map(vec3 p) {\r\n    float freq = SEA_FREQ;\r\n    float amp = SEA_HEIGHT;\r\n    float choppy = SEA_CHOPPY;\r\n    vec2 uv = p.xz; uv.x *= 0.75;\r\n    \r\n    float d, h = 0.0;    \r\n    for(int i = 0; i < ITER_GEOMETRY; i++) {        \r\n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\r\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\r\n        h += d * amp;        \r\n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\r\n        choppy = mix(choppy,1.0,0.2);\r\n    }\r\n    return p.y - h;\r\n}\r\n\r\nfloat map_detailed(vec3 p) {\r\n    float freq = SEA_FREQ;\r\n    float amp = SEA_HEIGHT;\r\n    float choppy = SEA_CHOPPY;\r\n    vec2 uv = p.xz; uv.x *= 0.75;\r\n    \r\n    float d, h = 0.0;    \r\n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \r\n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\r\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\r\n        h += d * amp;        \r\n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\r\n        choppy = mix(choppy,1.0,0.2);\r\n    }\r\n    return p.y - h;\r\n}\r\n\r\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \r\n    float fresnel = 1.0 - max(dot(n,-eye),0.0);\r\n    fresnel = pow(fresnel,3.0) * 0.65;\r\n        \r\n    vec3 reflected = getSkyColor(reflect(eye,n));    \r\n    vec3 refracted = SEA_BASE.rgb + diffuse(n,l,80.0) * SEA_WATER_COLOR.rgb * 0.12; \r\n    \r\n    vec3 color = mix(refracted,reflected,fresnel);\r\n    \r\n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\r\n    color += SEA_WATER_COLOR.rgb * (p.y - SEA_HEIGHT) * 0.18 * atten;\r\n    \r\n    color += vec3(specular(n,l,eye,60.0));\r\n    \r\n    return color;\r\n}\r\n\r\n// tracing\r\nvec3 getNormal(vec3 p, float eps) {\r\n    vec3 n;\r\n    n.y = map_detailed(p);    \r\n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\r\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\r\n    n.y = eps;\r\n    return normalize(n);\r\n}\r\n\r\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {  \r\n    float tm = 0.0;\r\n    float tx = 1000.0;    \r\n    float hx = map(ori + dir * tx);\r\n    if(hx > 0.0) return tx;   \r\n    float hm = map(ori + dir * tm);    \r\n    float tmid = 0.0;\r\n    for(int i = 0; i < NUM_STEPS; i++) {\r\n        tmid = mix(tm,tx, hm/(hm-hx));                   \r\n        p = ori + dir * tmid;                   \r\n    \tfloat hmid = map(p);\r\n\t\tif(hmid < 0.0) {\r\n        \ttx = tmid;\r\n            hx = hmid;\r\n        } else {\r\n            tm = tmid;\r\n            hm = hmid;\r\n        }\r\n    }\r\n    return tmid;\r\n}\r\n\r\n// main\r\nvoid main(){\r\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\r\n    uv = uv * 2.0 - 1.0;\r\n    uv.x *= RENDERSIZE.x / RENDERSIZE.y;    \r\n    float time = TIME * 0.3 + iMouse.x*0.01;\r\n        \r\n    // ray\r\n    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    \r\n    vec3 ori = vec3(0.0,3.5,time*5.0);\r\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;\r\n    dir = normalize(dir) * fromEuler(ang);\r\n    \r\n    // tracing\r\n    vec3 p;\r\n    heightMapTracing(ori,dir,p);\r\n    vec3 dist = p - ori;\r\n    vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);\r\n    vec3 light = normalize(vec3(0.0,1.0,0.8)); \r\n             \r\n    // color\r\n    vec3 color = mix(\r\n        getSkyColor(dir),\r\n        getSeaColor(p,n,light,dir,dist),\r\n    \tpow(smoothstep(0.0,-0.05,dir.y),0.3));\r\n        \r\n    // post\r\n\tgl_FragColor = vec4(pow(color,vec3(0.75)), 1.0);\r\n}'}});