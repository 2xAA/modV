webpackJsonp([62],{796:function(i,n){i.exports='/*{\n\t"DESCRIPTION": "Bayer style dithering",\n\t"CREDIT": "Hugh Kennedy, adapted by David Lublin",\n\t"CATEGORIES": [\n\t\t"Utility", "Color Effect"\n\t],\n\t"INPUTS": [\n\t\t{\n\t\t\t"NAME": "inputImage",\n\t\t\t"TYPE": "image"\n\t\t},\n\t\t{\n\t\t\t"NAME": "colorize",\n\t\t\t"TYPE": "float",\n\t\t\t"DEFAULT": 0.0,\n\t\t\t"MIN": 0.0,\n\t\t\t"MAX": 1.0\n\t\t},\n\t\t{\n\t\t\t"NAME": "matrixMode",\n\t\t\t"TYPE": "long",\n\t\t\t"VALUES": [\n\t\t\t\t0,\n\t\t\t\t1,\n\t\t\t\t2\n\t\t\t],\n\t\t\t"LABELS": [\n\t\t\t\t"2x2",\n\t\t\t\t"4x4",\n\t\t\t\t"8x8"\n\t\t\t],\n\t\t\t"DEFAULT": 2\n\t\t}\n\t]\n\t\n}*/\n\n\n\n//\tbased on https://github.com/hughsk/glsl-dither\n\nfloat luma(vec3 color)\t{\n\treturn (color.r + color.g + color.b) / 3.0;\t\n}\n\nfloat luma(vec4 color)\t{\n\treturn color.a * (color.r + color.g + color.b) / 3.0;\t\n}\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither8x8(vec2 position, vec3 color) {\n  return color * dither8x8(position, luma(color));\n}\n\nvec4 dither8x8(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither8x8(position, luma(color)), 1.0);\n}\n\nfloat dither4x4(vec2 position, float brightness) {\n  int x = int(mod(position.x, 4.0));\n  int y = int(mod(position.y, 4.0));\n  int index = x + y * 4;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.0625;\n    if (index == 1) limit = 0.5625;\n    if (index == 2) limit = 0.1875;\n    if (index == 3) limit = 0.6875;\n    if (index == 4) limit = 0.8125;\n    if (index == 5) limit = 0.3125;\n    if (index == 6) limit = 0.9375;\n    if (index == 7) limit = 0.4375;\n    if (index == 8) limit = 0.25;\n    if (index == 9) limit = 0.75;\n    if (index == 10) limit = 0.125;\n    if (index == 11) limit = 0.625;\n    if (index == 12) limit = 1.0;\n    if (index == 13) limit = 0.5;\n    if (index == 14) limit = 0.875;\n    if (index == 15) limit = 0.375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither4x4(vec2 position, vec3 color) {\n  return color * dither4x4(position, luma(color));\n}\n\nvec4 dither4x4(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither4x4(position, luma(color)), 1.0);\n}\n\nfloat dither2x2(vec2 position, float brightness) {\n  int x = int(mod(position.x, 2.0));\n  int y = int(mod(position.y, 2.0));\n  int index = x + y * 2;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.25;\n    if (index == 1) limit = 0.75;\n    if (index == 2) limit = 1.00;\n    if (index == 3) limit = 0.50;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither2x2(vec2 position, vec3 color) {\n  return color * dither2x2(position, luma(color));\n}\n\nvec4 dither2x2(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither2x2(position, luma(color)), 1.0);\n}\n\n\nvoid main()\t{\n\tvec4\t\tinputPixelColor = vec4(0.0);\n\tvec2\t\tloc = gl_FragCoord.xy;\n\t//\tboth of these are the same\n\tinputPixelColor = IMG_THIS_PIXEL(inputImage);\n\t\n\tfloat\t\tval = 1.0;\n\t\n\tif (matrixMode == 0)\t{\n\t\tval = dither2x2(loc, luma(inputPixelColor));\n\t}\n\telse if (matrixMode == 1)\t{\n\t\tval = dither4x4(loc, luma(inputPixelColor));\n\t}\n\telse if (matrixMode == 2)\t{\n\t\tval = dither8x8(loc, luma(inputPixelColor));\n\t}\n\t\n\tinputPixelColor = inputPixelColor * vec4(val,val,val,1.0);\n\n\tgl_FragColor = mix(vec4(val,val,val,inputPixelColor.a),inputPixelColor,colorize);\n}\n'}});