webpackJsonp([22],{849:function(n,c){n.exports='/*\n{\n  "CATEGORIES" : [\n    "XXX"\n  ],\n  "DESCRIPTION" : "",\n  "INPUTS" : [\n    {\n      "NAME" : "timeScale",\n      "TYPE" : "float",\n      "DEFAULT" : 0.18,\n      "MIN": 0.001,\n      "MAX": 2.0,\n      "LABEL" : "Time Scale"\n    },\n    {\n      "NAME": "uScale",\n      "TYPE": "point2D",\n      "LABEL" : "Scale",\n      "DEFAULT": [\n        10.5,\n        10.5\n      ],\n      "MAX": 50.0,\n      "MIN": 0.001\n    }\n  ],\n  "CREDIT" : ""\n}\n*/\n\nconst float PI = 3.1415926535897932384626433832795;\n\nvoid main() {\n\tfloat time = TIME / timeScale;\n\tvec2 scale = vec2(RENDERSIZE.x / uScale.x, RENDERSIZE.y / uScale.y);\n\tfloat v = 0.0;\n\tvec2 c = isf_FragNormCoord * scale - scale/2.0;\n\tv += sin((c.x+time));\n\tv += sin((c.y+time)/2.0);\n\tv += sin((c.x+c.y+time)/2.0);\n\tc += scale/2.0 * vec2(sin(time/3.0), cos(time/2.0));\n\tv += sin(sqrt(c.x*c.x+c.y*c.y+1.0)+time);\n\tv = v/2.0;\n\tvec3 col = vec3(1, sin(PI*v), cos(PI*v));\n\tgl_FragColor = vec4(col*.5 + .5, 1);\n}'}});