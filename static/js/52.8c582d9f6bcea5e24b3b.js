webpackJsonp([52],{825:function(t,n){t.exports='/*{\r\n\t"CREDIT": "by Toneburst",\r\n\t"CATEGORIES": [\r\n\t\t"Toneburst", "Tile Effect"\r\n\t],\r\n\t"INPUTS": [\r\n\t\t{\r\n\t\t\t"NAME": "inputImage",\r\n\t\t\t"TYPE": "image"\r\n\t\t},\r\n\t\t{\r\n\t\t\t"NAME": "cell_size",\r\n\t\t\t"TYPE": "float",\r\n\t\t\t"MIN": 0.001,\r\n\t\t\t"MAX": 1.0,\r\n\t\t\t"DEFAULT": 0.125\r\n\t\t},\r\n\t\t{\r\n\t\t\t"NAME": "zoom_tile",\r\n\t\t\t"TYPE": "float",\r\n\t\t\t"MIN": 0.0,\r\n\t\t\t"MAX": 2.0,\r\n\t\t\t"DEFAULT": 1.0\r\n\t\t},\r\n\t\t{\r\n\t\t\t"NAME": "mixAmount",\r\n\t\t\t"TYPE": "float",\r\n\t\t\t"MIN": 0.0,\r\n\t\t\t"MAX": 1.0,\r\n\t\t\t"DEFAULT": 0.5\r\n\t\t},\r\n\t\t{\r\n\t\t\t"NAME": "mode",\r\n\t\t\t"VALUES": [\r\n\t\t\t\t0,\r\n\t\t\t\t1\r\n\t\t\t],\r\n\t\t\t"LABELS": [\r\n\t\t\t\t"Multiply",\r\n\t\t\t\t"Mix"\r\n\t\t\t],\r\n\t\t\t"DEFAULT": 0,\r\n\t\t\t"TYPE": "long"\r\n\t\t}\r\n\t]\r\n}*/\r\n\r\nvoid main()\r\n{\r\n// CALCULATE EDGES OF CURRENT CELL\r\n\t// Position of current pixel\r\n\tvec2 xy = gl_FragCoord.xy / RENDERSIZE.xy;\r\n\t// Left and right of tile\r\n\tfloat CellWidth = cell_size;\r\n\tfloat CellHeight = cell_size;\r\n\tfloat x1 = floor(xy.x / CellWidth)*CellWidth;\r\n\tfloat x2 = clamp((ceil(xy.x / CellWidth)*CellWidth), 0.0, 1.0);\r\n\t// Top and bottom of tile\r\n\tfloat y1 = floor(xy.y / CellHeight)*CellHeight;\r\n\tfloat y2 = clamp((ceil(xy.y / CellHeight)*CellHeight), 0.0, 1.0);\r\n\r\n\t// GET AVERAGE CELL COLOUR\r\n\t// Average left and right pixels\r\n\tvec4 avgX = (IMG_NORM_PIXEL(inputImage, vec2(x1, y1))+(IMG_NORM_PIXEL(inputImage, vec2(x2, y1)))) / 2.0;\r\n\t// Average top and bottom pixels\r\n\tvec4 avgY = (IMG_NORM_PIXEL(inputImage, vec2(x1, y1))+(IMG_NORM_PIXEL(inputImage, vec2(x1, y2)))) / 2.0;\r\n\t// Centre pixel\r\n\tvec4 avgC = IMG_NORM_PIXEL(inputImage, vec2(x1+(CellWidth/2.0), y2+(CellHeight/2.0)));\t// Average the averages + centre\r\n\tvec4 avgClr = (avgX+avgY+avgC) / 3.0;\r\n\r\n\t// GET PIXELS FROM LITTLE IMAGE\t\r\n\t// X-position in current cell\r\n\tfloat cellPosX = (xy.x - x1) / CellWidth;\r\n\t// Y-position in current cell\r\n\tfloat cellPosY = (xy.y - y1) / CellHeight;\r\n\t\r\n\tvec2 loc = vec2(cellPosX, cellPosY);\r\n\tvec2 modifiedCenter = vec2(0.5);\r\n\tloc.x = (loc.x - modifiedCenter.x)*(1.0/zoom_tile) + modifiedCenter.x;\r\n\tloc.y = (loc.y - modifiedCenter.y)*(1.0/zoom_tile) + modifiedCenter.y;\r\n\t\r\n\tvec4 littlePix;\r\n\tif ((loc.x < 0.0)||(loc.y < 0.0)||(loc.x > 1.0)||(loc.y > 1.0))\t{\r\n\t\tlittlePix = vec4(0.0);\r\n\t}\r\n\telse\t{\r\n\t\tlittlePix = IMG_NORM_PIXEL(inputImage, loc);\r\n\t}\r\n\t\r\n\t// MULTIPLY LITTLE IMAGE COLOUR WITH AVERAGE CELL COLOUR AND OUTPUT\r\n\tif (mode == 0)\t{\r\n\t\tgl_FragColor = vec4(littlePix * avgClr);\r\n\t}\r\n\telse\t{\r\n\t\tgl_FragColor = vec4(mix(littlePix, avgClr, mixAmount));\r\n\t}\r\n}\r\n'}});