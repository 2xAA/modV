webpackJsonp([28],{824:function(n,t){n.exports='/*{\n  "DESCRIPTION": "VHS Glitch Style",\n  "CREDIT": "David Lublin, original by Staffan Widegarn Ã…hlvik",\n  "CATEGORIES": [\n    "Stylize",\n    "Glitch"\n  ],\n  "INPUTS": [\n    {\n      "NAME": "inputImage",\n      "TYPE": "image"\n    },\n    {\n      "NAME": "autoScan",\n      "TYPE": "bool",\n      "DEFAULT": 1\n    },\n    {\n      "NAME": "xScanline",\n      "TYPE": "float",\n      "DEFAULT": 0.5,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "xScanline2",\n      "TYPE": "float",\n      "DEFAULT": 0.5,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "yScanline",\n      "TYPE": "float",\n      "DEFAULT": 0,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "xScanlineSize",\n      "TYPE": "float",\n      "DEFAULT": 0.5,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "xScanlineSize2",\n      "TYPE": "float",\n      "DEFAULT": 0.25,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "yScanlineAmount",\n      "TYPE": "float",\n      "DEFAULT": 0.05,\n      "MIN": -1,\n      "MAX": 1\n    },\n    {\n      "NAME": "grainLevel",\n      "TYPE": "float",\n      "DEFAULT": 0,\n      "MIN": 0,\n      "MAX": 3\n    },\n    {\n      "NAME": "scanFollow",\n      "TYPE": "bool",\n      "DEFAULT": 1\n    },\n    {\n      "NAME": "analogDistort",\n      "TYPE": "float",\n      "DEFAULT": 1,\n      "MIN": 0,\n      "MAX": 10\n    },\n    {\n      "NAME": "bleedAmount",\n      "TYPE": "float",\n      "DEFAULT": 1,\n      "MIN": 0,\n      "MAX": 3\n    },\n    {\n      "NAME": "bleedDistort",\n      "TYPE": "float",\n      "DEFAULT": 0.5,\n      "MIN": 0,\n      "MAX": 1\n    },\n    {\n      "NAME": "bleedRange",\n      "TYPE": "float",\n      "DEFAULT": 1,\n      "MIN": 0,\n      "MAX": 2\n    },\n    {\n      "NAME": "colorBleedL",\n      "TYPE": "color",\n      "DEFAULT": [\n        0.8,\n        0,\n        0.4,\n        1\n      ]\n    },\n    {\n      "NAME": "colorBleedC",\n      "TYPE": "color",\n      "DEFAULT": [\n        0,\n        0.5,\n        0.9,\n        1\n      ]\n    },\n    {\n      "NAME": "colorBleedR",\n      "TYPE": "color",\n      "DEFAULT": [\n        0.8,\n        0,\n        0.4,\n        1\n      ]\n    }\n  ]\n}*/\n\n\n\n\n//\tBased on https://github.com/staffantan/unity-vhsglitch\n//\tConverted by David Lublin / VIDVOX\n\n\nconst float tau = 6.28318530718;\n\n\nfloat rand(vec3 co){\n\treturn abs(mod(sin( dot(co.xyz ,vec3(12.9898,78.233,45.5432) )) * 43758.5453, 1.0));\n}\n\nvoid main()\t{\n\tfloat\tactualXLine = (!autoScan) ? xScanline : mod(xScanline + ((1.0+sin(0.34*TIME))/2.0 + (1.0+sin(TIME))/3.0 + (1.0+cos(2.1*TIME))/3.0 + (1.0+cos(0.027*TIME))/2.0)/3.5,1.0);\n\tfloat\tactualXLineWidth = (!autoScan) ? xScanlineSize : 2.0 * xScanlineSize * ((1.0+sin(1.2*TIME))/2.0 + (1.0+cos(3.91*TIME))/3.0 + (1.0+cos(0.014*TIME))/2.0)/3.5;\n\tvec2\tloc = isf_FragNormCoord;\n\tvec4\tvhs = IMG_NORM_PIXEL(inputImage, loc);\n\tfloat\tdx = 1.0+actualXLineWidth/25.0-abs(distance(loc.y, actualXLine));\n\tfloat\tdx2 = 1.0+xScanlineSize2/10.0-abs(distance(loc.y, xScanline2));\n\tfloat\tdy = (1.0-abs(distance(loc.y, yScanline)));\n\tif (autoScan)\n\t\tdy = (1.0-abs(distance(loc.y, mod(yScanline+TIME,1.0))));\n\t\n\tdy = (dy > 0.5) ? 2.0 * dy : 2.0 * (1.0 - dy);\n\t\n\tfloat\trX = (scanFollow) ? rand(vec3(dy,actualXLine,analogDistort)) : rand(vec3(dy,bleedAmount,analogDistort));\n\tfloat\txTime = (actualXLine > 0.5) ? 2.0 * actualXLine : 2.0 * (1.0 - actualXLine);\n\t\n\tloc.x += yScanlineAmount * dy * 0.025 + analogDistort * rX/(RENDERSIZE.x/2.0);\n\t\n\tif(dx2 > 1.0 - xScanlineSize2 / 10.0)\t{\n\t\tfloat\trX2 = (dy * rand(vec3(dy,dx2,dx)) + dx2) / 4.0;\n\t\tfloat\tdistortAmount = analogDistort * (sin(rX * tau / dx2) + cos(rX * tau * 0.78 / dx2)) / 10.0;\n\t\t//loc.y = xScanline2;\n\t\tloc.x += (1.0 + distortAmount * sin(tau * (loc.x) / rX2 ) - 1.0) / 15.0;\n\t}\n\tif(dx > 1.0 - actualXLineWidth / 25.0)\n\t\tloc.y = actualXLine;\n\n\tloc.x = mod(loc.x,1.0);\n\tloc.y = mod(loc.y,1.0);\n\t\n\tvec4\tc = IMG_NORM_PIXEL(inputImage, loc);\n\tfloat\tx = (loc.x*320.0)/320.0;\n\tfloat\ty = (loc.y*240.0)/240.0;\n\tfloat\tbleed = 0.0;\n\t\n\tif (scanFollow)\n\t\tc -= rand(vec3(x, y, xTime)) * xTime / (5.0-grainLevel);\n\telse\n\t\tc -= rand(vec3(x, y, bleedAmount)) * (bleedAmount/20.0) / (5.0-grainLevel);\n\t\n\tif (bleedAmount > 0.0)\t{\n\t\tIMG_NORM_PIXEL(inputImage, loc + vec2(0.01, 0)).r;\n\t\tbleed += IMG_NORM_PIXEL(inputImage, loc + bleedRange * vec2(0.02, 0)).r;\n\t\tbleed += IMG_NORM_PIXEL(inputImage, loc + bleedRange * vec2(0.01, 0.01)).r;\n\t\tbleed += IMG_NORM_PIXEL(inputImage, loc + bleedRange * vec2(-0.02, 0.02)).r;\n\t\tbleed += IMG_NORM_PIXEL(inputImage, loc + bleedRange * vec2(0.0, -0.03)).r;\n\t\tbleed /= 6.0;\n\t\tbleed *= bleedAmount;\n\t}\n\n\tif (bleed > 0.1){\n\t\tfloat\tbleedFreq = 1.0;\n\t\tfloat\tbleedX = 0.0;\n\t\tif (autoScan)\n\t\t\tbleedX = x + bleedDistort * (yScanlineAmount + (1.5 + cos(TIME / 13.0 + tau*(bleedDistort+(1.0-loc.y))))/2.0) * sin((TIME / 9.0 + bleedDistort) * tau + loc.y * loc.y * tau * bleedFreq) / 8.0;\n\t\telse\n\t\t\tbleedX = x + (yScanlineAmount + (1.0 + sin(tau*(bleedDistort+loc.y)))/2.0) * sin(bleedDistort * tau + loc.y * loc.y * tau * bleedFreq) / 10.0;\n\t\tvec4\tcolorBleed = (bleedX < 0.5) ? mix(colorBleedL, colorBleedC, 2.0 * bleedX) : mix(colorBleedR, colorBleedC, 2.0 - 2.0 * bleedX);\n\t\tif (scanFollow)\n\t\t\tc += bleed * max(xScanlineSize,xTime) * colorBleed;\n\t\telse\n\t\t\tc += bleed * colorBleed;\n\t}\n\tgl_FragColor = c;\n}\n'}});