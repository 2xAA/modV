{"version":3,"sources":["webpack:///./src/modv/sample-modules/Ball-2.0.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C,aAAa,yBAAyB;AACtC,aAAa,6BAA6B;AAC1C;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,QAAQ,SAAS;AACjB;AACA,GAAG;;AAEH,UAAU,SAAS;AACnB;AACA,GAAG;;AAEH,QAAQ,4BAA4B;AACpC;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,uBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH","file":"static/js/84.f2db411efbbfaded3a05.js","sourcesContent":["// import Meyda from 'meyda';\n\nexport default {\n  meta: {\n    name: 'Ball',\n    author: '2xAA',\n    version: '1.0.0',\n    audioFeatures: ['zcr', 'rms'],\n    type: '2d',\n  },\n\n  props: {\n    amount: {\n      label: 'Amount',\n      type: 'int',\n      min: 1,\n      max: 300,\n      default: 1,\n      strict: true,\n    },\n\n    speed: {\n      label: 'Speed',\n      type: 'float',\n      min: 0,\n      max: 20,\n      step: 0.01,\n      default: 2,\n    },\n\n    wrap: {\n      label: 'Wrap',\n      type: 'bool',\n      default: false,\n    },\n\n    size: {\n      label: 'Size',\n      type: 'int',\n      min: 1,\n      max: 50,\n      step: 1,\n      default: 2,\n      abs: true,\n    },\n\n    intensity: {\n      label: 'RMS/ZCR Intensity',\n      type: 'int',\n      min: 0,\n      max: 30,\n      step: 1,\n      default: 15,\n      abs: true,\n    },\n\n    soundType: {\n      label: 'RMS (unchecked) / ZCR (checked)',\n      type: 'bool',\n      default: false,\n    },\n\n    color: {\n      default: { r: 255, g: 104, b: 163, a: 1 },\n      // explicitly define a control\n      control: {\n        type: 'paletteControl',\n\n        // pass options to the control\n        options: {\n          returnFormat: 'rgbaString',\n          colors: [\n            { r: 255, g: 255, b: 255, a: 1 },\n            { r: 0, g: 0, b: 0, a: 1 },\n            { r: 255, g: 0, b: 0, a: 0.5 },\n          ],\n          duration: 1000,\n        },\n      },\n    },\n  },\n\n  data: {\n    soundType: false, // false RMS, true ZCR\n    intensity: 1, // Half max\n    analysed: 0,\n    amount: 10,\n    baseSize: 1,\n    size: 2,\n    color: [255, 0, 0, 1],\n    speed: 1,\n    balls: [],\n    wrap: false,\n  },\n\n  init({ canvas }) {\n    this.setupBalls(canvas);\n  },\n\n  resize({ canvas }) {\n    this.setupBalls(canvas);\n  },\n\n  draw({ canvas, context, features }) {\n    if (this.soundType) {\n      this.analysed = (features.zcr / 10) * this.intensity;\n    } else {\n      this.analysed = (features.rms * 10) * this.intensity;\n    }\n\n    for (let i = 0; i < this.amount; i += 1) {\n      this.balls[i].speed = this.speed;\n      this.balls[i].wrap = this.wrap;\n      this.balls[i].drawUpdate(\n        canvas,\n        context,\n        this.analysed,\n        this.color,\n      );\n    }\n  },\n\n  setupBalls(canvas) {\n    this.balls = [];\n    for (let i = 0; i < 300; i += 1) {\n      const newBall = new (this.ballObj())();\n      newBall.speed = this.speed;\n      newBall.bounds.width = canvas.width;\n      newBall.bounds.height = canvas.height;\n      /*eslint-disable */\n      newBall.position.x = Math.floor(Math.random() * (newBall.bounds.width - 1 + 1) + 1);\n      newBall.position.y = Math.floor(Math.random() * (newBall.bounds.height - 1 + 1) + 1);\n      newBall.velocity.x = Math.floor(Math.random() * (10 - 1 + 1) + 1);\n      newBall.velocity.y = Math.floor(Math.random() * (10 - 1 + 1) + 1);\n      /* eslint-enable */\n      newBall.xReverse = Math.round(Math.random());\n      newBall.yReverse = Math.round(Math.random());\n      this.balls.push(newBall);\n    }\n  },\n\n  ballObj() {\n    const self = this;\n\n    return function ball() {\n      this.bounds = { width: 0, height: 0 };\n      this.position = { x: 0, y: 0 };\n      this.velocity = { x: 5, y: 5 };\n      this.wrap = false;\n      this.speed = self.speed;\n\n      this.xReverse = false;\n      this.yReverse = false;\n\n      this.drawUpdate = function drawUpdate(canvas, ctx, amp, colour) {\n        this.bounds.width = canvas.width;\n        this.bounds.height = canvas.height;\n\n        const ballRadius = self.size;\n\n        ctx.beginPath();\n        ctx.fillStyle = colour;\n        ctx.arc(\n          this.position.x,\n          this.position.y,\n          ballRadius + (self.size * amp),\n          0,\n          2 * Math.PI,\n          true,\n        );\n        ctx.fill();\n        ctx.closePath();\n\n        const x = this.position.x;\n        const y = this.position.y;\n        const dx = this.velocity.x;\n        const dy = this.velocity.y;\n\n        if (this.wrap) {\n          if (this.position.x - ballRadius < 1) {\n            this.position.x = (this.bounds.width - 1) - ballRadius;\n          }\n          if (this.position.y - ballRadius < 1) {\n            this.position.y = (this.bounds.height - 1) - ballRadius;\n          }\n\n          if (this.position.x + ballRadius > this.bounds.width - 1) {\n            this.position.x = ballRadius + 1;\n          }\n          if (this.position.y + ballRadius > this.bounds.height - 1) {\n            this.position.y = ballRadius + 1;\n          }\n        } else {\n          if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {\n            this.xReverse = !this.xReverse;\n          }\n          if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) {\n            this.yReverse = !this.yReverse;\n          }\n        }\n\n        if (this.xReverse) this.velocity.x = -this.speed;\n        else this.velocity.x = this.speed;\n\n        if (this.yReverse) this.velocity.y = -this.speed;\n        else this.velocity.y = this.speed;\n\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n\n        if (this.velocity.y === 0) this.velocity.y = -this.velocity.y + 1;\n      };\n\n      this.setBounds = function setBounds(width, height) {\n        this.bounds = {\n          width,\n          height,\n        };\n\n        if (this.position.x > this.bounds.width) this.position.x = this.bounds.width - 1;\n        if (this.position.y > this.bounds.height) this.position.y = this.bounds.height - 1;\n      };\n    };\n  },\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modv/sample-modules/Ball-2.0.js\n// module id = 766\n// module chunks = 84"],"sourceRoot":""}