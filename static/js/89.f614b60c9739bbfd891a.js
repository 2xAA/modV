webpackJsonp([89],{1767:function(n,e){n.exports='// Inspired by the "Angular Fisheye Ã  la Bourke" sketch from\n// Jonathan Cremieux, as shown in the OpenProcessing website:\n// http://openprocessing.org/visuals/?visualID=12140\n// Using the inverse transform of the angular fisheye as\n// explained in Paul Bourke\'s website:\n// http://paulbourke.net/miscellaneous/domefisheye/fisheye/\n\nprecision mediump float;\n\nuniform sampler2D u_modVCanvas;\nuniform float aperture;\n\nvarying vec2 vUv;\n\nconst float PI = 3.1415926535;\n\nvoid main(void) {\n  float apertureHalf = 0.5 * aperture * (PI / 180.0);\n\n  // This factor ajusts the coordinates in the case that\n  // the aperture angle is less than 180 degrees, in which\n  // case the area displayed is not the entire half-sphere.\n  float maxFactor = sin(apertureHalf);\n\n  vec2 pos = 2.0 * vUv - 1.0;\n\n  float l = length(pos);\n  if (l > 1.0) {\n    gl_FragColor = vec4(0, 0, 0, 1);\n  } else {\n    float x = maxFactor * pos.x;\n    float y = maxFactor * pos.y;\n\n    float n = length(vec2(x, y));\n\n    float z = sqrt(1.0 - n * n);\n\n    float r = atan(n, z) / PI;\n\n    float phi = atan(y, x);\n\n    float u = r * cos(phi) + 0.5;\n    float v = r * sin(phi) + 0.5;\n\n    gl_FragColor = texture2D(u_modVCanvas, vec2(u, v));\n  }\n}'}});