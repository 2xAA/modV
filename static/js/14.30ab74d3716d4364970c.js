webpackJsonp([14],{838:function(n,o){n.exports='/*\n{\n  "CATEGORIES" : [\n    "zoomer"\n  ],\n  "DESCRIPTION" : "Rotozoomer",\n  "ISFVSN" : "2",\n  "INPUTS" : [\n    {\n      "NAME" : "inputImage",\n      "TYPE" : "image"\n    },\n    {\n      "NAME" : "rotationSpeed",\n      "TYPE" : "float",\n      "MAX" : 360,\n      "DEFAULT" : 45,\n      "MIN" : 0,\n      "LABEL" : "Rotation Speed"\n    },\n    {\n      "NAME" : "zoomScale",\n      "TYPE" : "float",\n      "MAX" : 10,\n      "DEFAULT" : 3,\n      "LABEL" : "Zoom Scale",\n      "MIN" : 1\n    },\n    {\n      "NAME" : "timeScale",\n      "TYPE" : "float",\n      "MAX" : 3,\n      "DEFAULT" : 1,\n      "MIN" : -3\n    }\n  ],\n  "PASSES" : [\n    {\n\n    }\n  ],\n  "CREDIT" : "LukasPukenis "\n}\n*/\n\nvec3 iResolution = vec3(RENDERSIZE, 1.);\n\nfloat PI = 3.14;\n\nvec2 rotate(vec2 v, float angle) {\n  angle = angle * PI / 180.0;\n  return vec2(cos(angle)*v.x - v.y*sin(angle),\n        cos(angle)*v.y + v.x*sin(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = TIME * timeScale;\n  float zoom = (2.0+sin(time))/zoomScale;\n  vec2 as = vec2(iResolution.y / iResolution.x, 1.0);\n\n  vec2 zoomVec = vec2(zoom, zoom);\n  vec2 coords = fragCoord.xy / iResolution.xy;\n  coords -= vec2(0.5, 0.5);\n  coords /= as;\n  coords += vec2(1.0+sin(time), 1.0+sin(time));\n  coords *= zoomVec;\n\n  coords = rotate(coords, rotationSpeed * TIME);\n\n  vec4 pixel = IMG_NORM_PIXEL(inputImage, mod(coords+vec2(0.5, 0.5), 1.0));\n  fragColor = pixel;\n}\n\nvoid main(void) {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}'}});