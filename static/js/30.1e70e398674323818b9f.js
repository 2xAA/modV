webpackJsonp([30],{822:function(t,n){t.exports='/*\n {\n\t"CREDIT": "by mojovideotech",\n\t"DESCRIPTION": "",\n\t"CATEGORIES": [\n\t\t"generator",\n\t\t"flame",\n\t\t"fire",\n\t\t"3d noise"\n\t],\n\t"INPUTS": [\n  {\n    "NAME" :    "bgColorIn",\n    "TYPE" :    "color",\n    "DEFAULT" :   [ 0.0, 0.0, 0.0 ]\n  },\n\t{\n\t\t"NAME" : \t\t"center",\n\t\t"TYPE" : \t\t"point2D",\n\t\t"DEFAULT" :\t\t[ 0.0, 0.0 ],\n\t\t"MAX" : \t\t[ 1.0, 1.0 ],\n     \t"MIN" : \t\t[ -1.0, -1.0 ]\n\t},\n\t{\n\t\t"NAME" : \t\t"scale",\n\t\t"TYPE" : \t\t"float",\n\t\t"DEFAULT" : \t0.5,\n\t\t"MIN" : \t\t0.01,\n\t\t"MAX" : \t\t2.0\n\t},\n\t{\n\t\t"NAME" : \t\t"rate",\n\t\t"TYPE" : \t\t"float",\n\t\t"DEFAULT" : \t1.75,\n\t\t"MIN" : \t\t0.0,\n\t\t"MAX" : \t\t3.0\n\t},\n\t{\n     \t"NAME" :\t\t"seed1",\n     \t"TYPE" : \t\t"float",\n     \t"DEFAULT" :\t\t111,\n     \t"MIN" : \t\t55,\n     \t"MAX" :\t\t\t233\n\t},\n    {\n      \t"NAME" :\t\t"seed2",\n      \t"TYPE" :\t\t"float",\n      \t"DEFAULT" :\t\t277,\n      \t"MIN" : \t\t98,\n      \t"MAX" :\t\t\t337\n\t},\n    {\n     \t"NAME" :\t\t"seed3",\n      \t"TYPE" :\t\t"float",\n     \t"DEFAULT" :\t\t497,\n     \t"MIN" :\t\t\t301,\n     \t"MAX" :\t\t\t579\n    },\n\n\t{\n\t\t"NAME" : \t\t"freq",\n\t\t"TYPE" : \t\t"float",\n\t\t"DEFAULT" : \t1.5,\n\t\t"MIN" : \t\t0.1,\n\t\t"MAX" : \t\t3.0\n\t},\n\t{\n\t\t"NAME" : \t\t"flicker",\n\t\t"TYPE" : \t\t"float",\n\t\t"DEFAULT" : \t5.0,\n\t\t"MIN" : \t\t0.0,\n\t\t"MAX" : \t\t50.0\n\t},\n\t{\n\t\t"NAME" : \t\t"intensity",\n\t\t"TYPE" : \t\t"float",\n\t\t"DEFAULT" : \t0.15,\n\t\t"MIN" : \t\t-0.33,\n\t\t"MAX" : \t\t2.0\n\t},\n\t{\n      \t"NAME" : \t\t"light",\n      \t"TYPE" : \t\t"float",\n      \t"DEFAULT" :\t\t0.45,\n      \t"MIN" : \t\t0.0,\n      \t"MAX" : \t\t0.5\n    },\n    {\n      \t"NAME" :\t\t"contours",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t1.05,\n      \t"MIN" :\t\t\t0.0,\n      \t"MAX" :\t\t\t2.0\n    },\n    {\n      \t"NAME" : \t\t"bottomedges",\n      \t"TYPE" : \t\t"float",\n      \t"DEFAULT" :\t\t0.05,\n      \t"MIN" : \t\t0.0,\n      \t"MAX" : \t\t0.667\n    },\n    {\n      \t"NAME" : \t\t"topedges",\n      \t"TYPE" : \t\t"float",\n      \t"DEFAULT" :\t\t0.45,\n      \t"MIN" : \t\t0.125,\n      \t"MAX" : \t\t1.0\n    },\n    {\n      \t"NAME" :\t\t"depth",\n      \t"TYPE" :\t\t"float",\n      \t"DEFAULT" :\t\t100.0,\n      \t"MIN" :\t\t\t5.0,\n      \t"MAX" :\t\t\t250.0\n    },\n    {\n      \t"NAME" :\t\t"expand",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t0.8,\n      \t"MIN" :\t\t\t0.1,\n      \t"MAX" :\t\t\t5.0\n    },\n    {\n      \t"NAME" :\t\t"cutoff",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t8.0,\n      \t"MIN" :\t\t\t6.0,\n      \t"MAX" :\t\t\t10.0\n    },\n    {\n      \t"NAME" :\t\t"wave",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t0.15,\n      \t"MIN" :\t\t\t0.1,\n      \t"MAX" :\t\t\t2.0\n    },\n    {\n      \t"NAME" :\t\t"fractnoise",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t0.33,\n      \t"MIN" :\t\t\t0.0,\n      \t"MAX" :\t\t\t1.0\n    },\n\t{\n      \t"NAME" :\t\t"multiplier",\n      \t"TYPE":\t\t\t"float",\n      \t"DEFAULT" :\t\t2.0,\n      \t"MIN" :\t\t\t1.0,\n      \t"MAX" :\t\t\t4.9\n    },\n    {\n      "NAME": "style",\n      "TYPE": "long",\n      "VALUES": [\n        0,\n        1,\n        2\n      ],\n      "LABELS": [\n        "EightBit",\n        "PhotoReal",\n        "OpArt"\n      ],\n      "DEFAULT": 1\n\t}\n  ]\n}\n*/\n\n////////////////////////////////////////////////////////////\n// UltimateFlame   by mojovideotech\n//\n// based on :\n// The Blue Flame  by Hadyn Lander\n// shadertoy.com/\\lsjcRt\n//\n// 3D noise from Nikita Miropolskiy\n// shadertoy.com/\\XsX3zB\n//\n// License:\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n////////////////////////////////////////////////////////////\n\n\n\n#define \tpi   \t3.141592653589793 \t// pi\n\nvec3 random3(vec3 c) {\n\tfloat j = 4231.0*sin(dot(c,vec3(seed1, seed2, seed3)));\n\tvec3 k;\n\tk.z = fract(seed1*j);\n\tj *= .5;\n\tk.x = fract(seed2*j);\n\tj *= .25;\n\tk.y = fract(seed3*j);\n\treturn k-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t vec4 w, d;\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t w = max(0.6 - w, 0.0);\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t return dot(d, vec4(depth));\n}\n\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\nfloat simplex3d_fractal(vec3 n) {\n    return   0.5333333*simplex3d(n*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*n*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*n*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*n);\n}\n\nvoid main()\n{\n   \tvec3 finalColor, bgColor, hColor, fColor;\n   \tfloat noise, value, edge, m, v, r, h, o;\n   \tfloat TT = 28.22 + TIME * rate;\n    float nf = 1.0/freq;\n\tvec2 pos = gl_FragCoord.xy / RENDERSIZE.y;\n    vec2 wf = vec2(0.0);\n    float aspect = RENDERSIZE.x/RENDERSIZE.y;\n    vec2 poc = pos-vec2(0.5*aspect, 0.5) - center;\n    poc/=scale;\n    poc.x /= expand;\n    float pob = 0.5*(poc.y+1.0);\n    wf.x += pob*sin(4.0*poc.y-4.0*TT);\n    wf.y += 0.1*pob*sin(4.0*poc.x-1.561*TT);\n    poc += wave*wf;\n\tpoc.x += poc.x / (1.0-(poc.y));\n    m = 1.0-pow(1.0-clamp(1.0-length(poc), 0.0, 1.0), 10.1-cutoff);\n    vec3 p3 = nf*0.25*vec3(pos.x, pos.y, 0.0) + vec3(0.0, -TT*0.1, TT*0.025);\n    noise = mix(simplex3d(p3*16.0*floor(multiplier)),simplex3d_fractal(p3*8.0*floor(multiplier)),fractnoise);\n\tnoise = 0.5 + 0.5*noise;\n    value = (m*noise)+intensity*m;\n\n    if(style == 0)\n    {\n        edge = mix(bottomedges, topedges, pow(0.5*(poc.y+1.0), 1.2) );\n        v = smoothstep(edge,edge+0.01, value);\n        v = mix(0.5*v, 1.0, smoothstep(1.5*edge,1.5*edge+0.01, value));\n        v = mix(0.5*v, 1.0, smoothstep(3.0*edge,3.0*edge+0.01, value));\n    \t  bgColor = vec3(0.1,0.0,0.2);\n        finalColor = mix(bgColor, vec3(1.1,0.5,0.0), v);\n    }\n    else if(style == 1)\n    {\n        edge = mix(bottomedges, topedges, pow(0.5*(poc.y+1.0), 1.2) );\n        v = smoothstep(edge,edge+0.1, value);\n        h = light+.5-clamp(value-edge, 0.0 , 1.0);\n\t\t    p3 = nf*0.1*vec3(pos.x, pos.y, 0.0) + vec3(0.0, -TT*0.01, TT*0.025);\n        noise = simplex3d(p3*32.0);\n        noise = 0.5 + 0.5*noise;\n        r = mix(h, noise, 0.65);\n        r = 0.5*sin(6.0*pi*(1.0-pow(1.0-r,1.8)) - 0.5*pi)+0.5;\n        o = smoothstep(0.95, 1.0, pow(r, 8.0));\n        o = mix(o, 0.0, (2.1-contours)-noise);\n        h = max(o, h);\n        h = pow(h, 2.0);\n        hColor = mix(vec3(1.0,0.4,0.0), vec3(2.0,0.6,0.0), pos.y);\n        hColor += vec3(0.9,0.4,0.0) * pow(sin(TIME*flicker), 4.0);\n        fColor = mix(vec3(0.2,0.2,0.2), vec3(1.0,0.05,0.05), pos.y);\n        finalColor = hColor*(v*h);\n        finalColor += fColor*v;\n    \t  bgColor = bgColorIn.xyz;\n        finalColor += bgColor;\n    }\n    else\n    {\n        edge = mix(bottomedges, topedges, pow(0.5*(poc.y+1.0), 1.2) );\n        v = smoothstep(edge,edge+0.01, value);\n        r = 0.5*sin(1.0*pi*(value/edge) + 0.5*pi)+0.5;\n        v = 1.0-smoothstep(0.5,0.6, 1.0-r);\n        finalColor = vec3(1.0,1.0,1.0)*v;\n    }\n\n\tgl_FragColor = vec4(finalColor,1.0);\n\n}'}});