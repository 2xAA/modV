webpackJsonp([56],{821:function(t,n){t.exports='/*{\n\t"CREDIT": "by VIDVOX",\n\t"ISFVSN": "2",\n\t"CATEGORIES": [\n\t\t"Tile Effect"\n\t],\n\t"INPUTS": [\n\t\t{\n\t\t\t"NAME": "inputImage",\n\t\t\t"TYPE": "image"\n\t\t},\n\t\t{\n\t\t\t"NAME": "size",\n\t\t\t"TYPE": "float",\n\t\t\t"MIN": 0.0,\n\t\t\t"MAX": 2.0,\n\t\t\t"DEFAULT": 0.5\n\t\t},\n\t\t{\n\t\t\t"NAME": "sides",\n\t\t\t"TYPE": "float",\n\t\t\t"MIN": 1.0,\n\t\t\t"MAX": 32.0,\n\t\t\t"DEFAULT": 6.0\n\t\t},\n\t\t{\n\t\t\t"NAME": "rotation",\n\t\t\t"TYPE": "float",\n\t\t\t"MIN": 0.0,\n\t\t\t"MAX": 1.0,\n\t\t\t"DEFAULT": 0.125\n\t\t},\n\t\t{\n\t\t\t"NAME": "angle",\n\t\t\t"TYPE": "float",\n\t\t\t"MIN": 0.0,\n\t\t\t"MAX": 1.0,\n\t\t\t"DEFAULT": 0.0\n\t\t},\n\t\t{\n\t\t\t"NAME": "slide1",\n\t\t\t"TYPE": "point2D",\n\t\t\t"DEFAULT": [\n\t\t\t\t0.0,\n\t\t\t\t0.0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"NAME": "slide2",\n\t\t\t"TYPE": "point2D",\n\t\t\t"DEFAULT": [\n\t\t\t\t0.0,\n\t\t\t\t0.0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t"NAME": "shift",\n\t\t\t"TYPE": "point2D",\n\t\t\t"DEFAULT": [\n\t\t\t\t0.0,\n\t\t\t\t0.0\n\t\t\t]\n\t\t}\n\t]\n}*/\n\n\nconst float tau = 6.28318530718;\n\n\nvec2 pattern() {\n\tfloat s = sin(tau * rotation);\n\tfloat c = cos(tau * rotation);\n\tvec2 tex = isf_FragNormCoord * RENDERSIZE;\n\tfloat scale = 1.0 / max(size,0.001);\n\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\tpoint = (point - shift) / RENDERSIZE;\n\t//\tdo this to repeat\n\tpoint = mod(point,1.0);\n\tif (point.x < 0.5)\t{\n\t\tpoint.y = mod(point.y + slide1.y/RENDERSIZE.y, 1.0);\n\t}\n\telse\t{\n\t\tpoint.y = mod(point.y + slide2.y/RENDERSIZE.y, 1.0);\n\t}\n\tif (point.y < 0.5)\t{\n\t\tpoint.x = mod(point.x + slide1.x/RENDERSIZE.x, 1.0);\n\t}\n\telse\t{\n\t\tpoint.x = mod(point.x + slide2.x/RENDERSIZE.x, 1.0);\n\t}\n\t//\tdo this for relections\n\tpoint = 1.0-abs(1.0-2.0*point);\n\t\n\t//\tNow let\'s do a squish based on angle\n\t//\tconvert to polar coordinates\n\tvec2 center = vec2(0.5,0.5);\n\tfloat r = distance(center, point);\n\tfloat a = atan ((point.y-center.y),(point.x-center.x));\n\t\n\t// now do the kaleidoscope\n\ta = mod(a, tau/sides);\n\ta = abs(a - tau/sides/2.);\n\t\n\ts = sin(a + tau * angle);\n\tc = cos(a + tau * angle);\n\t\n\tfloat zoom = RENDERSIZE.x / RENDERSIZE.y;\n\t\n\tpoint.x = (r * c)/zoom + 0.5;\n\tpoint.y = (r * s)/zoom + 0.5;\n\t\n\treturn point;\n}\n\n\nvoid main() {\n\n\tvec2 pat = pattern();\n\n\tgl_FragColor = IMG_NORM_PIXEL(inputImage,pat);\n}'}});