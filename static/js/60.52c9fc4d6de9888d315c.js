webpackJsonp([60],{760:function(t,n){t.exports='/*{\n\t"CREDIT": "by VIDVOX",\n\t"ISFVSN": "2",\n\t"CATEGORIES": [\n\t\t"Distortion Effect"\n\t],\n\t"INPUTS": [\n\t\t{\n\t\t\t"NAME": "inputImage",\n\t\t\t"TYPE": "image"\n\t\t},\n\t\t{\n\t\t\t"NAME": "intensity",\n\t\t\t"TYPE": "float",\n\t\t\t"MIN": 0.0,\n\t\t\t"MAX": 10.0,\n\t\t\t"DEFAULT": 0.2\n\t\t},\n\t\t{\n\t\t\t"NAME": "invert_map",\n\t\t\t"TYPE": "bool",\n\t\t\t"DEFAULT": 0.0\n\t\t}\n\t]\n}*/\n\n\nvarying vec2 left_coord;\nvarying vec2 right_coord;\nvarying vec2 above_coord;\nvarying vec2 below_coord;\n\nvarying vec2 lefta_coord;\nvarying vec2 righta_coord;\nvarying vec2 leftb_coord;\nvarying vec2 rightb_coord;\n\nfloat gray(vec4 n)\n{\n\treturn (n.r + n.g + n.b)/3.0;\n}\n\nconst float tau = 6.28318530718;\n\nvoid main()\n{\n\n\tvec4 color = IMG_THIS_PIXEL(inputImage);\n\tvec4 colorL = IMG_NORM_PIXEL(inputImage, left_coord);\n\tvec4 colorR = IMG_NORM_PIXEL(inputImage, right_coord);\n\tvec4 colorA = IMG_NORM_PIXEL(inputImage, above_coord);\n\tvec4 colorB = IMG_NORM_PIXEL(inputImage, below_coord);\n\n\tvec4 colorLA = IMG_NORM_PIXEL(inputImage, lefta_coord);\n\tvec4 colorRA = IMG_NORM_PIXEL(inputImage, righta_coord);\n\tvec4 colorLB = IMG_NORM_PIXEL(inputImage, leftb_coord);\n\tvec4 colorRB = IMG_NORM_PIXEL(inputImage, rightb_coord);\n\n\n\n\tfloat gx = (-1.0 * gray(colorLA)) + (-1.0 * gray(colorL)) + (-1.0 * gray(colorLB)) + (1.0 * gray(colorRA)) + (1.0 * gray(colorR)) + (1.0 * gray(colorRB));\n\tfloat gy = (1.0 * gray(colorLA)) + (1.0 * gray(colorA)) + (1.0 * gray(colorRA)) + (-1.0 * gray(colorRB)) + (-1.0 * gray(colorB)) + (-1.0 * gray(colorLB));\n\n\tfloat edge = pow(gx*gx + gy*gy,0.5);\n\tfloat brightness = (color.r + color.g + color.b) / 3.0;\n\n\tvec2 tc = isf_FragNormCoord;\n\tvec2 modifiedCenter = vec2(0.5,0.5);\n\tfloat r = distance(modifiedCenter, tc);\n\tfloat a = atan ((tc.y-modifiedCenter.y),(tc.x-modifiedCenter.x));\n\t\n\t//\tadjust the angle and radius based on the brightness and edge level\n\tif (invert_map)\t{\n\t\tedge = 1.0 - edge;\n\t}\n\tr = r + intensity * (1.0-edge) * (brightness - 0.5);\n\t//a = a + intensity * pow(1.0+edge,brightness);\n\t\n\ttc.x = r * cos(a) + 0.5;\n\ttc.y = r * sin(a) + 0.5;\n\t\n\tvec4 final = IMG_NORM_PIXEL(inputImage, tc);\n\t\n\tgl_FragColor = final;\n}'}});