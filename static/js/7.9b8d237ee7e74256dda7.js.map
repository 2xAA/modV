{"version":3,"sources":["webpack:///./src/extra/awesome-text.js","webpack:///./src/modv/sample-modules/Text.js"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;;;;;;;;;;AClCA;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM,MAAM,gBAAgB;AAC9D,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA,aAAa,wBAAwB;AACrC,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA,mBAAmB,UAAU;AAC7B;AACA,GAAG;;AAEH,QAAQ,kBAAkB;AAC1B;;AAEA,mBAAmB,UAAU,MAAM,gBAAgB;AACnD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH","file":"static/js/7.9b8d237ee7e74256dda7.js","sourcesContent":["// originally from here, made modifications for the line height http://stackoverflow.com/a/37192581/1539303\nfunction awesomeText(ctx, text, x, y, lineHeight, maxWidth, textAlign = 'center') {\n  ctx.textAlign = textAlign;\n  const words = text.split(' ');\n  const lines = [];\n  let sliceFrom = 0;\n\n  for (let i = 0; i < words.length; i += 1) {\n    const chunk = words.slice(sliceFrom, i).join(' ');\n    const last = i === words.length - 1;\n    const bigger = ctx.measureText(chunk).width > maxWidth;\n    if (bigger) {\n      lines.push(words.slice(sliceFrom, i).join(' '));\n      sliceFrom = i;\n    }\n    if (last) {\n      lines.push(words.slice(sliceFrom, words.length).join(' '));\n      sliceFrom = i;\n    }\n  }\n\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (textAlign === 'center') offsetX = maxWidth / 2;\n\n  offsetY -= (lines.length - 1) * (lineHeight / 2);\n\n  for (let i = 0; i < lines.length; i += 1) {\n    ctx.fillText(lines[i], x + offsetX, y + offsetY);\n    offsetY += lineHeight;\n  }\n}\n\nexport default awesomeText;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/extra/awesome-text.js\n// module id = 1768\n// module chunks = 7","/* eslint-disable no-underscore-dangle */\n\nimport awesomeText from '@/extra/awesome-text';\n\nfunction getTextHeight(font, textContent) {\n  const result = {};\n\n  const text = document.createElement('span');\n  text.style.font = font;\n  text.textContent = textContent;\n\n  const block = document.createElement('div');\n  block.style.display = 'inline-block';\n  block.style.width = '1px';\n  block.style.height = '0px';\n\n  const div = document.createElement('div');\n  div.appendChild(text);\n  div.appendChild(block);\n\n  document.body.appendChild(div);\n\n  block.style.verticalAlign = 'baseline';\n  result.ascent = block.offsetHeight - text.offsetHeight;\n\n  block.style.verticalAlign = 'bottom';\n  result.height = block.offsetHeight - text.offsetHeight;\n\n  result.descent = result.height - result.ascent;\n\n  div.remove();\n\n  return result;\n}\n\nexport default {\n  meta: {\n    name: 'Text',\n    author: '2xAA',\n    version: 0.1,\n    type: '2d',\n  },\n\n  props: {\n    text: {\n      type: 'string',\n      label: 'Text',\n      default: 'modV',\n      set(value) {\n        this.h = getTextHeight(this.font, value);\n      },\n    },\n\n    size: {\n      type: 'int',\n      label: 'Size',\n      min: 1,\n      max: 200,\n      default: 50,\n      set(value) {\n        this.h = getTextHeight(`${value}pt \"${this.customFont}\", sans-serif`, this.text);\n      },\n    },\n\n    customFont: {\n      type: 'string',\n      label: 'Font',\n      default: 'Rubik',\n    },\n\n    color: {\n      control: {\n        type: 'paletteControl',\n        default: { r: 199, g: 64, b: 163 },\n        options: {\n          colors: [\n            { r: 199, g: 64, b: 163 },\n            { r: 97, g: 214, b: 199 },\n            { r: 222, g: 60, b: 75 },\n            { r: 101, g: 151, b: 220 },\n            { r: 213, g: 158, b: 151 },\n            { r: 100, g: 132, b: 129 },\n            { r: 154, g: 94, b: 218 },\n            { r: 194, g: 211, b: 205 },\n            { r: 201, g: 107, b: 152 },\n            { r: 119, g: 98, b: 169 },\n            { r: 214, g: 175, b: 208 },\n            { r: 218, g: 57, b: 123 },\n            { r: 196, g: 96, b: 98 },\n            { r: 218, g: 74, b: 219 },\n            { r: 138, g: 100, b: 121 },\n            { r: 96, g: 118, b: 225 },\n            { r: 132, g: 195, b: 223 },\n            { r: 82, g: 127, b: 162 },\n            { r: 209, g: 121, b: 211 },\n            { r: 181, g: 152, b: 220 },\n          ], // generated here: http://tools.medialab.sciences-po.fr/iwanthue/\n          duration: 500,\n        },\n      },\n    },\n  },\n\n  init() {\n    this.font = `${this.size}pt \"Helvetica\", sans-serif`;\n    this.h = getTextHeight(this.font, this.text);\n  },\n\n  draw({ canvas, context }) {\n    context.textBaseline = 'middle';\n\n    this.font = `${this.size}pt \"${this.customFont}\", sans-serif`;\n    context.font = this.font;\n\n    context.textAlign = 'left';\n    context.fillStyle = this.color;\n\n    awesomeText(\n      context,\n      this.text,\n      200 / 2,\n      canvas.height / 2,\n      Math.abs(this.h.height),\n      canvas.width - 200,\n    );\n  },\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modv/sample-modules/Text.js\n// module id = 784\n// module chunks = 7"],"sourceRoot":""}